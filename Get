./library/LibUtilities/BasicUtils/FieldIO.cpp:            int nprocs = m_comm->GetSize();
./library/LibUtilities/BasicUtils/FieldIO.cpp:            int rank   = m_comm->GetRank();
./library/LibUtilities/BasicUtils/FieldIO.cpp:            m_comm->AllReduce(elmtnums,LibUtilities::ReduceMax);
./library/LibUtilities/BasicUtils/FieldIO.cpp:                    m_comm->Recv(i, tmp);
./library/LibUtilities/BasicUtils/FieldIO.cpp:                m_comm->Send(0, idlist);
./library/LibUtilities/BasicUtils/FieldIO.cpp:            pad % m_comm->GetRank();
./library/LibUtilities/BasicUtils/MeshPartition.cpp:            ASSERTL0(m_comm->GetRowComm()->GetSize() > 1,
./library/LibUtilities/BasicUtils/MeshPartition.cpp:            ASSERTL0(m_meshElements.size() >= m_comm->GetRowComm()->GetSize(),
./library/LibUtilities/BasicUtils/MeshPartition.cpp:            int rank = m_comm->GetRowComm()->GetRank();
./library/LibUtilities/BasicUtils/MeshPartition.cpp:            for (int i = 0; i < m_comm->GetRowComm()->GetSize(); ++i)
./library/LibUtilities/BasicUtils/MeshPartition.cpp:            int nPart = m_comm->GetRowComm()->GetSize();
./library/LibUtilities/BasicUtils/MeshPartition.cpp:            if (m_comm->GetRowComm()->GetRank() == 0)
./library/LibUtilities/BasicUtils/MeshPartition.cpp:                int npart = m_comm->GetRowComm()->GetSize();
./library/LibUtilities/BasicUtils/MeshPartition.cpp:                    if(m_comm->GetColumnComm()->GetRank() == 0)
./library/LibUtilities/BasicUtils/MeshPartition.cpp:                            for (i = 1; i < m_comm->GetColumnComm()->GetSize(); ++i)
./library/LibUtilities/BasicUtils/MeshPartition.cpp:                                m_comm->GetColumnComm()->Send(i, part);
./library/LibUtilities/BasicUtils/MeshPartition.cpp:                        m_comm->GetColumnComm()->Recv(0, part);
./library/LibUtilities/BasicUtils/MeshPartition.cpp:                        m_comm->GetColumnComm()->Block();
./library/LibUtilities/BasicUtils/MeshPartition.cpp:                        for (i = 1; i < m_comm->GetRowComm()->GetSize(); ++i)
./library/LibUtilities/BasicUtils/MeshPartition.cpp:                            m_comm->GetRowComm()->Send(i, part);
./library/LibUtilities/BasicUtils/MeshPartition.cpp:                m_comm->GetRowComm()->Recv(0, part);
./library/LibUtilities/BasicUtils/MeshPartition.cpp:            int nCols = m_comm->GetRowComm()->GetSize();
./library/LibUtilities/BasicUtils/MeshPartition.cpp:            const unsigned int npart = m_comm->GetRowComm()->GetSize();
./library/LibUtilities/BasicUtils/SessionReader.cpp:            if (m_comm->GetSize() > 1)
./library/LibUtilities/BasicUtils/SessionReader.cpp:                if (m_comm->GetSize() > 1)
./library/LibUtilities/BasicUtils/SessionReader.cpp:            if (m_comm->GetSize() > 1)
./library/LibUtilities/BasicUtils/SessionReader.cpp:            m_exprEvaluator.SetRandomSeed((m_comm->GetRank() + 1) * time(NULL));
./library/LibUtilities/BasicUtils/SessionReader.cpp:            std::string vFilename = "P" + boost::lexical_cast<std::string>(m_comm->GetRowComm()->GetRank());
./library/LibUtilities/BasicUtils/SessionReader.cpp:            m_comm->Finalise();
./library/LibUtilities/BasicUtils/SessionReader.cpp:            CommSharedPtr vCommMesh = m_comm->GetRowComm();
./library/LibUtilities/BasicUtils/SessionReader.cpp:                m_comm->Block();
./library/LibUtilities/BasicUtils/SessionReader.cpp:                pad % m_comm->GetRank();
./library/LibUtilities/BasicUtils/SessionReader.cpp:            if (m_comm->GetSize() > 1)
./library/LibUtilities/BasicUtils/SessionReader.cpp:                ASSERTL0(m_comm->GetSize() % (nProcZ*nProcY*nProcX) == 0,
./library/LibUtilities/BasicUtils/SessionReader.cpp:                int nProcSem = m_comm->GetSize() / nProcSm;
./library/LibUtilities/BasicUtils/SessionReader.cpp:                m_comm->SplitComm(nProcSm,nProcSem);
./library/LibUtilities/BasicUtils/SessionReader.cpp:                m_comm->GetColumnComm()->SplitComm((nProcY*nProcX),nProcZ);
./library/LibUtilities/BasicUtils/SessionReader.cpp:                m_comm->GetColumnComm()->GetColumnComm()->SplitComm(
./library/LibUtilities/BasicUtils/SessionReader.cpp:                if(m_comm->GetRank() == 0)
./library/LibUtilities/BasicUtils/SessionReader.cpp:            if (m_comm && m_comm->GetRowComm()->GetSize() > 1)
./library/LibUtilities/BasicUtils/SessionReader.cpp:                if(m_comm->GetRank() == 0)
./library/LibUtilities/BasicUtils/SessionReader.cpp:                if(m_comm->GetRank() == 0)
./library/LibUtilities/BasicUtils/SessionReader.cpp:                if(m_comm->GetRank() == 0)
./library/MultiRegions/AssemblyMap/AssemblyMapCG1D.cpp:            m_comm->AllReduce(hash, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG.cpp:            LibUtilities::CommSharedPtr vCommRow = m_comm->GetRowComm();
./library/MultiRegions/AssemblyMap/AssemblyMapCG2D.cpp:            m_comm->GetRowComm()->AllReduce(hash, 
./library/MultiRegions/AssemblyMap/AssemblyMapCG2D.cpp:            LibUtilities::CommSharedPtr vCommRow = m_comm->GetRowComm();
./library/MultiRegions/AssemblyMap/AssemblyMapCG2D.cpp:            int n = m_comm->GetSize();
./library/MultiRegions/AssemblyMap/AssemblyMapCG2D.cpp:            int p = m_comm->GetRank();
./library/MultiRegions/AssemblyMap/AssemblyMapCG2D.cpp:                if (m_comm->GetRank() != vertprocs[i])
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            int n = m_comm->GetSize();
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            int p = m_comm->GetRank();
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(vertcounts, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(edgecounts, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(vertlist, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(edgelist, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(vertcounts, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(edgecounts, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(vertids,   LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(vertprocs, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(edgeids,   LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(edgeprocs, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:                if (m_comm->GetRank() == vertprocs[i]) 
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:                if (m_comm->GetRank() == edgeprocs[i])
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(s, LibUtilities::ReduceMin);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(bccounts, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->AllReduce(meshVertId, LibUtilities::ReduceSum);
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:                m_comm->AllReduce(m_lowestStaticCondLevel, 
./library/MultiRegions/AssemblyMap/AssemblyMapCG3D.cpp:            m_comm->GetRowComm()->AllReduce(hash, 
./library/MultiRegions/AssemblyMap/AssemblyMapDG.cpp:            m_comm->AllReduce(maxDof, LibUtilities::ReduceMax);
./library/MultiRegions/AssemblyMap/AssemblyMapDG.cpp:            m_comm->AllReduce(maxQuad, LibUtilities::ReduceMax);
./library/MultiRegions/DisContField3D.cpp:            m_comm->AllReduce(vSame, LibUtilities::ReduceMin);
./library/MultiRegions/ExpList3DHomogeneous1D.cpp:            m_comm->GetColumnComm()->AllReduce(err, LibUtilities::ReduceSum);
./library/MultiRegions/ExpList3DHomogeneous1D.cpp:            m_comm->GetRowComm()->AllReduce(area, LibUtilities::ReduceSum);
./library/MultiRegions/ExpList3DHomogeneous1D.cpp:                m_comm->GetRowComm()->AllReduce(energy[n/2], LibUtilities::ReduceSum);
./library/MultiRegions/ExpListHomogeneous1D.cpp:			m_transposition = MemoryManager<LibUtilities::Transposition>::AllocateSharedPtr(HomoBasis,m_comm->GetColumnComm());
./library/MultiRegions/ExpListHomogeneous1D.cpp:			m_planes = Array<OneD,ExpListSharedPtr>(m_homogeneousBasis->GetNumPoints()/m_comm->GetColumnComm()->GetSize());
./library/MultiRegions/ExpListHomogeneous1D.cpp:            int num_proc             = m_comm->GetColumnComm()->GetSize();
./library/MultiRegions/ExpListHomogeneous1D.cpp:                int num_dfts_per_proc    = num_points_per_plane/m_comm->GetColumnComm()->GetSize() + (num_points_per_plane%m_comm->GetColumnComm()->GetSize() > 0);
./library/MultiRegions/ExpListHomogeneous1D.cpp:                cout<<m_comm->GetColumnComm()->GetSize()<<" "m_comm->GetRawComm()->GetSize()
./library/MultiRegions/ExpListHomogeneous1D.cpp:            num_trans_per_proc = n_exp/m_comm->GetColumnComm()->GetSize() + (n_exp%m_comm->GetColumnComm()->GetSize() > 0);
./library/MultiRegions/ExpListHomogeneous1D.cpp:                    ASSERTL0(m_comm->GetColumnComm()->GetSize() == 1,"Parallelisation in the homogeneous direction implemented just for Fourier basis");
./library/MultiRegions/ExpListHomogeneous1D.cpp:                    ASSERTL0(m_comm->GetColumnComm()->GetSize() == 1,"Parallelisation in the homogeneous direction implemented just for Fourier basis");
./library/MultiRegions/ExpListHomogeneous2D.cpp:			m_transposition = MemoryManager<LibUtilities::Transposition>::AllocateSharedPtr(HomoBasis_y,HomoBasis_z,m_comm->GetColumnComm());
./library/MultiRegions/ExpListHomogeneous2D.cpp:			m_Ycomm = m_comm->GetColumnComm()->GetRowComm();
./library/MultiRegions/ExpListHomogeneous2D.cpp:			m_Zcomm = m_comm->GetColumnComm()->GetRowComm();
./library/MultiRegions/ExpListHomogeneous2D.cpp:				ASSERTL0(m_comm->GetColumnComm()->GetSize() == 1,"Remove dealiasing if you want to run in parallel");
./library/MultiRegions/DisContField2D.cpp:            m_comm->GetRowComm()->AllReduce(vSame, LibUtilities::ReduceMin);
./library/MultiRegions/ExpList.cpp:            m_comm->GetRowComm()->AllReduce(err, LibUtilities::ReduceMax);
./library/MultiRegions/ExpList.cpp:            m_comm->GetRowComm()->AllReduce(err, LibUtilities::ReduceSum);
./library/MultiRegions/ExpList.cpp:            m_comm->GetRowComm()->AllReduce(err, LibUtilities::ReduceSum);
./library/MultiRegions/ExpList.cpp:            m_comm->GetRowComm()->AllReduce(err, LibUtilities::ReduceSum);
./library/MultiRegions/PreconditionerBlock.cpp:            m_comm->AllReduce(maxEdgeDof, LibUtilities::ReduceMax);
./library/MultiRegions/PreconditionerBlock.cpp:            m_comm->AllReduce(maxEdgeDof, LibUtilities::ReduceMax);
./library/MultiRegions/PreconditionerBlock.cpp:            m_comm->AllReduce(maxFaceDof, LibUtilities::ReduceMax);
./library/MultiRegions/PreconditionerLowEnergy.cpp:            m_comm->AllReduce(maxEdgeDof, LibUtilities::ReduceMax);
./library/MultiRegions/PreconditionerLowEnergy.cpp:            m_comm->AllReduce(maxFaceDof, LibUtilities::ReduceMax);
Binary file ./library/MultiRegions/.ExpListHomogeneous1D.cpp.swp matches
./library/SolverUtils/DriverArpack.cpp:                if (m_comm->GetRank() == 0)
./library/SolverUtils/DriverStandard.cpp:            if (m_comm->GetRank() == 0)
./library/SolverUtils/DriverStandard.cpp:                if (m_comm->GetRank() == 0)
./library/SolverUtils/DriverSteadyState.cpp:                if (m_comm->GetRank() == 0)
./library/SolverUtils/DriverModifiedArnoldi.cpp:            if (m_comm->GetRank() == 0)
./library/SolverUtils/DriverModifiedArnoldi.cpp:                m_comm->AllReduce(alpha[0], Nektar::LibUtilities::ReduceSum);
./library/SolverUtils/DriverModifiedArnoldi.cpp:                if (m_comm->GetRank() == 0)
./library/SolverUtils/DriverModifiedArnoldi.cpp:                    m_comm->AllReduce(alpha[i],
./library/SolverUtils/DriverModifiedArnoldi.cpp:                if (m_comm->GetRank() == 0)
./library/SolverUtils/EquationSystem.cpp:                    m_comm->AllReduce(Vol, LibUtilities::ReduceSum);
./solvers/CompressibleFlowSolver/EquationSystems/EulerCFE.cpp:                Vmath::FillWhiteNoise(phystot,Noise,noise,1,m_comm->GetColumnComm()->GetRank()+1);
./solvers/CompressibleFlowSolver/EquationSystems/NavierStokesCFE.cpp:                Vmath::FillWhiteNoise(phystot,Noise,noise,1,m_comm->GetColumnComm()->GetRank()+1);
./solvers/CompressibleFlowSolver/EquationSystems/CompressibleFlowSystem.cpp:        m_comm->AllReduce(TimeStep, LibUtilities::ReduceMin);
./solvers/IncNavierStokesSolver/EquationSystems/Extrapolate.cpp:        m_comm->AllReduce(checkHBC,LibUtilities::ReduceSum);
./solvers/IncNavierStokesSolver/EquationSystems/IncNavierStokes.cpp:        m_comm->AllReduce(CFL,LibUtilities::ReduceMax);
./solvers/IncNavierStokesSolver/EquationSystems/IncNavierStokes.cpp:        m_comm->AllReduce(elmtid,LibUtilities::ReduceMax);
./solvers/IncNavierStokesSolver/EquationSystems/IncNavierStokes.cpp:            if(m_comm->GetRank() == 0)
./solvers/IncNavierStokesSolver/EquationSystems/SubSteppingExtrapolate.cpp:        if (m_infosteps && !((nstep+1)%m_infosteps) && m_comm->GetRank() == 0)
./solvers/IncNavierStokesSolver/EquationSystems/SubSteppingExtrapolate.cpp:        m_comm->AllReduce(TimeStep,LibUtilities::ReduceMin);        
./solvers/IncNavierStokesSolver/Filters/FilterEnergy.cpp:            if (m_comm->GetRank() == 0)
./solvers/IncNavierStokesSolver/Filters/FilterEnergy.cpp:            if (m_comm->GetRank() == 0)
./solvers/IncNavierStokesSolver/Filters/FilterEnergy.cpp:            if (m_comm->GetRank() == 0)
./solvers/PulseWaveSolver/EquationSystems/PulseWaveSystem.cpp:            m_comm->AllReduce(Vol, LibUtilities::ReduceSum);
