SET(NEKTAR_VERSION 0.1.1)
SET(NEKTAR_BIN_DIR bin)
SET(NEKTAR_LIB_DIR lib)
SET(NEKTAR_INCLUDE_DIR include)

MACRO(CHANGE_EXTENSION output var new_ext)
    GET_FILENAME_COMPONENT(FileName ${var} NAME_WE)
    GET_FILENAME_COMPONENT(Path ${var} PATH)
    SET(${output} ${Path}/${FileName}.${new_ext})
ENDMACRO()

IF( MSVC )
	# Needed for M_PI to be visible in visual studio.
	ADD_DEFINITIONS(-D_USE_MATH_DEFINES)
	
	# Removes the warnings about unsafe methods such as strcpy, std::copy, memcmp, etc.
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE)
ENDIF( )
	
IF( NEKTAR_USE_TINYXML_STL )
    ADD_DEFINITIONS( -DTIXML_USE_STL)
ENDIF( NEKTAR_USE_TINYXML_STL )

IF( NEKTAR_USE_DIRECT_BLAS_CALLS )    
    ADD_DEFINITIONS(-DNEKTAR_USING_DIRECT_BLAS_CALLS)
ENDIF( NEKTAR_USE_DIRECT_BLAS_CALLS )

IF( NEKTAR_USE_EXPRESSION_TEMPLATES )
    ADD_DEFINITIONS(-DNEKTAR_USE_EXPRESSION_TEMPLATES -DNEKTAR_USING_CMAKE)
ENDIF( NEKTAR_USE_EXPRESSION_TEMPLATES )

IF( NEKTAR_USE_MEMORY_POOLS )
    ADD_DEFINITIONS(-DNEKTAR_MEMORY_POOL_ENABLED)
ELSE( NEKTAR_USE_MEMORY_POOLS )
    REMOVE_DEFINITIONS(-DNEKTAR_MEMORY_POOL_ENABLED)
ENDIF( NEKTAR_USE_MEMORY_POOLS )

IF( NEKTAR_BUILD_SHARED )
    SET(NEKTAR_LIBRARY_TYPE "SHARED")
ELSE( NEKTAR_BUILD_SHARED )
    SET(NEKTAR_LIBRARY_TYPE "STATIC")
ENDIF( NEKTAR_BUILD_SHARED )

IF( NEKTAR_USE_METIS )   
    INCLUDE (FindMetis)
    ADD_DEFINITIONS(-DNEKTAR_USING_METIS)
ENDIF( NEKTAR_USE_METIS )

IF( NEKTAR_USE_MKL )
    INCLUDE (FindMKL)
ENDIF( NEKTAR_USE_MKL )

IF( NEKTAR_USE_NIST_SPARSE_BLAS_TOOLKIT )
    INCLUDE (FindNistSparseBlas)
ENDIF( NEKTAR_USE_NIST_SPARSE_BLAS_TOOLKIT )

IF( NEKTAR_USE_ACCELERATE_FRAMEWORK )
    INCLUDE (FindAccelerateFramework)
ENDIF( NEKTAR_USE_ACCELERATE_FRAMEWORK )

IF( NEKTAR_USE_CHUD_FRAMEWORK )
    INCLUDE (FindCHUDFramework)
    ADD_DEFINITIONS(-DNEKTAR_USING_CHUD)	
ENDIF( NEKTAR_USE_CHUD_FRAMEWORK )

#IF( NEKTAR_USE_ATLAS )
#    INCLUDE( FindAtlas )
#ENDIF( NEKTAR_USE_ATLAS )

IF( NEKTAR_USE_ACML )
    INCLUDE (FindACML)
ENDIF( NEKTAR_USE_ACML )

IF( NEKTAR_USE_WIN32_LAPACK )
    INCLUDE (FindWin32Lapack)
ENDIF( NEKTAR_USE_WIN32_LAPACK )

IF( NEKTAR_USE_SYSTEM_BLAS_LAPACK )
    INCLUDE(FindNativeBlasLapack)
ENDIF( NEKTAR_USE_SYSTEM_BLAS_LAPACK )

IF( NEKTAR_USE_MKL )
    SET(NEKTAR_USING_BLAS TRUE)
    SET(NEKTAR_USING_LAPACK TRUE)
    SET(NEKTAR_USING_MKL TRUE)
    ADD_DEFINITIONS(-DNEKTAR_USING_LAPACK -DNEKTAR_USING_BLAS)	
ENDIF( NEKTAR_USE_MKL )

#IF( NEKTAR_USE_ATLAS )
#    SET(NEKTAR_USING_BLAS TRUE)
#    SET(NEKTAR_USING_ATLAS TRUE)
#    ADD_DEFINITIONS(-DNEKTAR_USING_LAPACK -DNEKTAR_USING_BLAS)	
#ENDIF( NEKTAR_USE_ATLAS )

IF( NEKTAR_USE_ACML )
    SET(NEKTAR_USING_BLAS TRUE)
    SET(NEKTAR_USING_LAPACK TRUE)
    SET(NEKTAR_USING_ACML TRUE)
    ADD_DEFINITIONS(-DNEKTAR_USING_LAPACK -DNEKTAR_USING_BLAS -DUSE_ACML)
    ADD_DEFINITIONS(-DNEKTAR_USING_LAPACK -DNEKTAR_USING_BLAS)
ENDIF( NEKTAR_USE_ACML )

IF( NEKTAR_USE_BLAS_LAPACK )
    ADD_DEFINITIONS( -DNEKTAR_USING_LAPACK -DNEKTAR_USING_BLAS )
ENDIF( NEKTAR_USE_BLAS_LAPACK )


MACRO(SET_LAPACK_LINK_LIBRARIES name)
    IF( NEKTAR_USE_BLAS_LAPACK )
        IF( NEKTAR_USE_MKL AND MKL_FOUND )
            TARGET_LINK_LIBRARIES(${name} ${MKL_LAPACK} optimized ${MKL} debug ${MKL} ${MKL_GUIDE})
        ENDIF( NEKTAR_USE_MKL AND MKL_FOUND )

        IF( NEKTAR_USE_NIST_SPARSE_BLAS_TOOLKIT AND NIST_SPARSE_BLAS_FOUND )   
            TARGET_LINK_LIBRARIES(${name} ${NIST_SPARSE_BLAS} )
        ENDIF( NEKTAR_USE_NIST_SPARSE_BLAS_TOOLKIT AND NIST_SPARSE_BLAS_FOUND )  
        
        IF( NEKTAR_USE_ACML AND ACML_FOUND )
            TARGET_LINK_LIBRARIES(${name} ${ACML_TARGET_LINK_LIBRARIES}  )
        ENDIF( NEKTAR_USE_ACML AND ACML_FOUND )

        IF( NEKTAR_USE_ACCELERATE_FRAMEWORK )
            TARGET_LINK_LIBRARIES(${name} ${ACCELERATE_FRAMEWORK_LINK_FLAGS})
        ENDIF ( NEKTAR_USE_ACCELERATE_FRAMEWORK )

        IF( NEKTAR_USE_CHUD_FRAMEWORK )
            TARGET_LINK_LIBRARIES(${name} ${CHUD_FRAMEWORK_LINK_FLAGS})
        ENDIF ( NEKTAR_USE_CHUD_FRAMEWORK )

        IF( NEKTAR_USE_WIN32_LAPACK )
	        TARGET_LINK_LIBRARIES(${name} ${WIN32_LAPACK} ${WIN32_BLAS})
	        INSTALL(FILES ${WIN32_LAPACK_DLL} ${WIN32_BLAS_DLL}
	            DESTINATION ${NEKTAR_BIN_DIR})
        ENDIF( NEKTAR_USE_WIN32_LAPACK )

#	IF( USE_ATLAS AND ATLAS_FOUND )
#        	TARGET_LINK_LIBRARIES(${name}
#            		${ATLAS_LAPACK}
#            		${ATLAS_CBLAS}
#            		${ATLAS} )
#	ENDIF( USE_ATLAS AND ATLAS_FOUND )

        IF( NEKTAR_USE_SYSTEM_BLAS_LAPACK )
                 TARGET_LINK_LIBRARIES(${name} ${NATIVE_LAPACK} ${NATIVE_BLAS})
        ENDIF( NEKTAR_USE_SYSTEM_BLAS_LAPACK )

        IF( NEKTAR_USE_METIS )    
            TARGET_LINK_LIBRARIES(${name} optimized ${METIS_LIB} debug ${METIS_LIB} )
            ENDIF( NEKTAR_USE_METIS )
    ENDIF( NEKTAR_USE_BLAS_LAPACK )
ENDMACRO(SET_LAPACK_LINK_LIBRARIES name)

MACRO(SET_COMMON_PROPERTIES name)
	SET_TARGET_PROPERTIES(${name} PROPERTIES VERSION ${NEKTAR_VERSION})

    SET_TARGET_PROPERTIES(${name} PROPERTIES DEBUG_POSTFIX -g)
    SET_TARGET_PROPERTIES(${name} PROPERTIES MINSIZEREL_POSTFIX -ms)
    SET_TARGET_PROPERTIES(${name} PROPERTIES RELWITHDEBINFO_POSTFIX -rg)

    IF( MSVC )
        # Disable the warnings about duplicate copy/assignment methods (4521, 4522)
        # Disable the warning that arrays are default intialized (4351)	
        # Disable "forcing value to bool 'true' or 'false' (performance warning)" warning (4800)

        # /Za is necessary to prevent temporaries being bound to reference parameters.
        SET_TARGET_PROPERTIES(${name} PROPERTIES COMPILE_FLAGS "/wd4521 /wd4522 /wd4351 /wd4018 /wd4800")
    ENDIF(  )	

    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DNEKTAR_DEBUG")
    
    IF ( NEKTAR_FULL_DEBUG )
        SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DNEKTAR_FULLDEBUG")
    ENDIF()
    
    IF( NOT MSVC )
        SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fpermissive")
    ENDIF()
    
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DNEKTAR_RELEASE")
    
    IF( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
        # The static libraries must be compiled with position independent code 
        # on 64 bit Linux.
        SET_TARGET_PROPERTIES(${name} PROPERTIES COMPILE_FLAGS "-fPIC")
    ENDIF( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )

    IF( ${CMAKE_COMPILER_IS_GNUCXX} )
        IF(NEKTAR_ENABLE_PROFILE)
            #SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -finstrument-functions")
        ENDIF(NEKTAR_ENABLE_PROFILE)
    ENDIF( ${CMAKE_COMPILER_IS_GNUCXX} )

ENDMACRO(SET_COMMON_PROPERTIES name)

MACRO(SETUP_PRECOMPILED_HEADERS sourceFiles precompiledHeader)
    IF( NEKTAR_USE_PRECOMPILED_HEADERS )
        IF( MSVC )	
            # /Yu"stdafx.h" 
            #MESSAGE(${${precompiledHeader}})
    	    #MESSAGE(${${sourceFiles}})
            SET_SOURCE_FILES_PROPERTIES(${${sourceFiles}} PROPERTIES COMPILE_FLAGS "/Yu\"${${precompiledHeader}}\"")
            LIST(GET ${sourceFiles} 0 OUTVAR)
            #MESSAGE(${OUTVAR})
            SET_SOURCE_FILES_PROPERTIES(${OUTVAR} PROPERTIES COMPILE_FLAGS "/Yc\"${${precompiledHeader}}\"")
            
        ENDIF()	
    ENDIF()
ENDMACRO()

MACRO(ADD_NEKTAR_EXECUTABLE name sources)
    IF( ${ARGC} LESS 3 )
        ADD_EXECUTABLE(${name} ${${sources}})
    ELSE( ${ARGC} LESS 3 )
        ADD_EXECUTABLE(${name} ${${sources}} ${${ARGV2}})
    ENDIF( ${ARGC} LESS 3)
	
    SET_COMMON_PROPERTIES(${name})
    
    IF( NEKTAR_USE_MKL AND MKL_FOUND )
    #        MESSAGE("Using MKL")
            TARGET_LINK_LIBRARIES(${name}
                ${MKL_LAPACK}
                optimized ${MKL} debug ${MKL}
                ${MKL_GUIDE}
    
    #optimized mkl_ia32 debug mkl_ia32
    #            optimized mkl debug mkl
    #            optimized vml debug vml
    #            optimized guide debug guide
            )
    ENDIF( NEKTAR_USE_MKL AND MKL_FOUND )
    
    IF( NEKTAR_USE_ACML AND ACML_FOUND )
        #TARGET_LINK_LIBRARIES(${name} ${ACML} gfortran )
    ENDIF( NEKTAR_USE_ACML AND ACML_FOUND )
    

    TARGET_LINK_LIBRARIES(${name}
        optimized LibUtilities debug LibUtilities-g
        ${Boost_THREAD_LIBRARY} 
        ${Boost_ZLIB_LIBRARY} 
        ${Boost_IOSTREAMS_LIBRARY} 
        ${Boost_DATE_TIME_LIBRARY} 
        ${Boost_FILESYSTEM_LIBRARY} 
        ${Boost_SYSTEM_LIBRARY} 
        optimized tinyxml debug tinyxml
	)

    IF( ${CMAKE_COMPILER_IS_GNUCXX} )
        IF(NEKTAR_ENABLE_PROFILE)
            #TARGET_LINK_LIBRARIES(${name} Saturn)
        ENDIF(NEKTAR_ENABLE_PROFILE)
    ENDIF( ${CMAKE_COMPILER_IS_GNUCXX} )

    IF( ${CMAKE_SYSTEM} MATCHES "Linux.*" )
        # The boost thread library needs pthread on linux.
	GET_TARGET_PROPERTY(THE_COMPILE_FLAGS ${name} COMPILE_FLAGS)
	GET_TARGET_PROPERTY(THE_LINK_FLAGS ${name} LINK_FLAGS)

	# It is possible these flags have not been set yet.
	IF(NOT THE_COMPILE_FLAGS)
		SET(THE_COMPILE_FLAGS "")
	ENDIF(NOT THE_COMPILE_FLAGS)

	IF(NOT THE_LINK_FLAGS )
	       SET(THE_LINK_FLAGS "")
	ENDIF(NOT THE_LINK_FLAGS)

        SET_TARGET_PROPERTIES(${name} PROPERTIES COMPILE_FLAGS "${THE_COMPILE_FLAGS} -pthread")
        SET_TARGET_PROPERTIES(${name} PROPERTIES LINK_FLAGS "${THE_LINK_FLAGS} -pthread")
	
    ENDIF( ${CMAKE_SYSTEM} MATCHES "Linux.*" )

    INSTALL(TARGETS ${name} RUNTIME DESTINATION ${NEKTAR_BIN_DIR} OPTIONAL
        ARCHIVE DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL
        LIBRARY DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL)

ENDMACRO(ADD_NEKTAR_EXECUTABLE name sources)

MACRO(ADD_NEKTAR_LIBRARY name type)
    ADD_LIBRARY(${name} ${type} ${ARGN})

    SET_COMMON_PROPERTIES(${name})
    
#    INSTALL(TARGETS ${name} RUNTIME DESTINATION ${NEKTAR_BIN_DIR} OPTIONAL
#		          ARCHIVE DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL
#			   LIBRARY DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL)

    INSTALL(TARGETS ${name} EXPORT Nektar++Libraries RUNTIME DESTINATION ${NEKTAR_BIN_DIR} OPTIONAL
		          ARCHIVE DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL
			   LIBRARY DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL) 
ENDMACRO(ADD_NEKTAR_LIBRARY name type)
