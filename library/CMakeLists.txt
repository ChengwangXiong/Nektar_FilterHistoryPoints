CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(Nektar++)

INCLUDE(CMakeExportBuildSettings)

# Use the CMake 2.4 policy for CMake 2.6
if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 OLD)
endif(COMMAND cmake_policy)

# Find the modules included with Nektar
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR} ${CMAKE_MODULE_PATH})
SET(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/dist CACHE FILEPATH "" FORCE)

INCLUDE(NektarCommon)

SET(NEKTAR_USE_METIS OFF CACHE BOOL "Use Metis routines for partitioning and reordering graphs.")
SET(NEKTAR_USE_TINYXML_STL ON CACHE BOOL "Use STL with TinyXML library.")
SET(NEKTAR_USE_DIRECT_BLAS_CALLS OFF CACHE BOOL "Use direct BLAS calls rather than NekMatrix calls in the StdRegions and LocalRegions sublibrary")
SET(NEKTAR_FULL_DEBUG OFF CACHE BOOL "Enable Full Debugging.")
SET(NEKTAR_USE_PRECOMPILED_HEADERS OFF CACHE BOOL "Enable the use of precompiled headers.")
SET(NEKTAR_BUILD_DEMOS ON CACHE BOOL "Build Demo Projects")

IF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	
	SET(ExpressionTemplateDefault OFF)
ELSE( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	
	SET(ExpressionTemplateDefault ON)
ENDIF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	

SET(NEKTAR_USE_EXPRESSION_TEMPLATES ${ExpressionTemplateDefault} CACHE BOOL "")

MARK_AS_ADVANCED(NEKTAR_USE_DIRECT_BLAS_CALLS)
MARK_AS_ADVANCED(NEKTAR_FULL_DEBUG)
MARK_AS_ADVANCED(NEKTAR_USE_MEMORY_POOLS)

MARK_AS_ADVANCED(NEKTAR_USE_PRECOMPILED_HEADERS)
MARK_AS_ADVANCED(NEKTAR_USE_EXPRESSION_TEMPLATES)

SET(Boost_USE_STATIC_LIBS ON)
SET(Boost_USE_MULTITHREAD ON)
SET(BOOST_ROOT ${CMAKE_SOURCE_DIR}/../ThirdParty/boost)
SET(Boost_ADDITIONAL_VERSIONS "1.35.0")

INCLUDE (FindBoost)
INCLUDE (FindLoki)
INCLUDE (FindTinyXml)


FIND_PACKAGE( Boost 1.35.0 REQUIRED COMPONENTS thread iostreams zlib )


IF( NEKTAR_USE_METIS )
    FIND_PACKAGE(Metis REQUIRED)
ENDIF( NEKTAR_USE_METIS )




INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR} ${Boost_INCLUDE_DIRS} ${LOKI_INCLUDE_DIR} ${TINYXML_BASE})

SET(NEKTAR_VERSION 0.1.1)
SET(NEKTAR_BIN_DIR bin)
SET(NEKTAR_LIB_DIR lib)
SET(NEKTAR_INCLUDE_DIR include)

MACRO(SET_COMMON_PROPERTIES name)
	SET_TARGET_PROPERTIES(${name} PROPERTIES VERSION ${NEKTAR_VERSION})

    SET_TARGET_PROPERTIES(${name} PROPERTIES DEBUG_POSTFIX -g)
    SET_TARGET_PROPERTIES(${name} PROPERTIES MINSIZEREL_POSTFIX -ms)
    SET_TARGET_PROPERTIES(${name} PROPERTIES RELWITHDEBINFO_POSTFIX -rg)

    IF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )
        # Disable the warnings about duplicate copy/assignment methods (4521, 4522)
        # Disable the warning that arrays are default intialized (4351)	
        # /Za is necessary to prevent temporaries being bound to reference parameters.
        SET_TARGET_PROPERTIES(${name} PROPERTIES COMPILE_FLAGS "/wd4521 /wd4522 /wd4351 /wd4018")
    ENDIF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	

    IF ( NEKTAR_FULL_DEBUG )
        SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DNEKTAR_DEBUG -DNEKTAR_FULLDEBUG")
    ELSE( NEKTAR_FULL_DEBUG )
        SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DNEKTAR_DEBUG -fpermissive")
    ENDIF( NEKTAR_FULL_DEBUG )
    
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DNEKTAR_RELEASE")
    
    IF( ${CMAKE_COMPILER_IS_GNUCXX} )
        IF(NEKTAR_ENABLE_PROFILING)
            SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -p")
        ENDIF(NEKTAR_ENABLE_PROFILING)
    ENDIF( ${CMAKE_COMPILER_IS_GNUCXX} )

ENDMACRO(SET_COMMON_PROPERTIES name)

MACRO(SETUP_PRECOMPILED_HEADERS sourceFiles precompiledHeader)
    IF( NEKTAR_USE_PRECOMPILED_HEADERS )
        IF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	
            # /Yu"stdafx.h" 
            #MESSAGE(${${precompiledHeader}})
	    #MESSAGE(${${sourceFiles}})
            SET_SOURCE_FILES_PROPERTIES(${${sourceFiles}} PROPERTIES COMPILE_FLAGS "/Yu\"${${precompiledHeader}}\"")
            LIST(GET ${sourceFiles} 0 OUTVAR)
            #MESSAGE(${OUTVAR})
            SET_SOURCE_FILES_PROPERTIES(${OUTVAR} PROPERTIES COMPILE_FLAGS "/Yc\"${${precompiledHeader}}\"")
            
        ENDIF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	
    ENDIF( NEKTAR_USE_PRECOMPILED_HEADERS )
ENDMACRO(SETUP_PRECOMPILED_HEADERS sourceFiles precompiledHeader)

MACRO(ADD_NEKTAR_LIBRARY name type)
    ADD_LIBRARY(${name} ${type} ${ARGN})

    SET_COMMON_PROPERTIES(${name})
    
#    INSTALL(TARGETS ${name} RUNTIME DESTINATION ${NEKTAR_BIN_DIR} OPTIONAL
#		          ARCHIVE DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL
#			   LIBRARY DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL)

    INSTALL(TARGETS ${name} EXPORT Nektar++Libraries RUNTIME DESTINATION ${NEKTAR_BIN_DIR} OPTIONAL
		          ARCHIVE DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL
			   LIBRARY DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL) 
ENDMACRO(ADD_NEKTAR_LIBRARY name type)


IF( NEKTAR_USE_EXPRESSION_TEMPLATES )
    ADD_DEFINITIONS(-DNEKTAR_USE_EXPRESSION_TEMPLATES -DNEKTAR_USING_CMAKE)
ENDIF( NEKTAR_USE_EXPRESSION_TEMPLATES )

IF( NEKTAR_USE_MEMORY_POOLS )
    ADD_DEFINITIONS(-DNEKTAR_MEMORY_POOL_ENABLED)
ELSE( NEKTAR_USE_MEMORY_POOLS )
    REMOVE_DEFINITIONS(-DNEKTAR_MEMORY_POOL_ENABLED)
ENDIF( NEKTAR_USE_MEMORY_POOLS )

IF( NEKTAR_USE_PRECOMPILED_HEADERS )
    ADD_DEFINITIONS(-DNEKTAR_USE_PRECOMPILED_HEADERS)
ELSE( NEKTAR_USE_PRECOMPILED_HEADERS )
    REMOVE_DEFINITIONS(-DNEKTAR_USE_PRECOMPILED_HEADERS)
ENDIF( NEKTAR_USE_PRECOMPILED_HEADERS )


IF( NEKTAR_USE_TINYXML_STL )
    ADD_DEFINITIONS( -DTIXML_USE_STL)
ENDIF( NEKTAR_USE_TINYXML_STL )

IF( NEKTAR_USE_METIS )    
    ADD_DEFINITIONS(-DNEKTAR_USING_METIS)
ENDIF( NEKTAR_USE_METIS )

IF( NEKTAR_USE_DIRECT_BLAS_CALLS )    
    ADD_DEFINITIONS(-DNEKTAR_USING_DIRECT_BLAS_CALLS)
ENDIF( NEKTAR_USE_DIRECT_BLAS_CALLS )


IF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	
	# Removes the warnings about unsafe methods such as strcpy, std::copy, memcmp, etc.
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE)
	
ENDIF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )

IF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 7 .NET 2003" )
	# Needed for M_PI to be visible in visual studio.
	ADD_DEFINITIONS(-D_USE_MATH_DEFINES)
ENDIF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 7 .NET 2003" )

IF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	
	ADD_DEFINITIONS(-D_USE_MATH_DEFINES)
ENDIF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	

MACRO(ADD_NEKTAR_EXECUTABLE name sources)
    IF( ${ARGC} LESS 3 )
        ADD_EXECUTABLE(${name} ${${sources}})
    ELSE( ${ARGC} LESS 3 )
        ADD_EXECUTABLE(${name} ${${sources}} ${${ARGV2}})
    ENDIF( ${ARGC} LESS 3)
	
    SET_COMMON_PROPERTIES(${name})
    
    IF( NEKTAR_USE_MKL AND MKL_FOUND )
    #        MESSAGE("Using MKL")
            TARGET_LINK_LIBRARIES(${name}
                ${MKL_LAPACK}
                optimized ${MKL} debug ${MKL}
                ${MKL_GUIDE}
    
    #optimized mkl_ia32 debug mkl_ia32
    #            optimized mkl debug mkl
    #            optimized vml debug vml
    #            optimized guide debug guide
            )
    ENDIF( NEKTAR_USE_MKL AND MKL_FOUND )
    
    IF( NEKTAR_USE_ACML AND ACML_FOUND )
        #TARGET_LINK_LIBRARIES(${name} ${ACML} gfortran )
    ENDIF( NEKTAR_USE_ACML AND ACML_FOUND )
    
    IF( NEKTAR_USE_ATLAS AND ATLAS_FOUND )
            #TARGET_LINK_LIBRARIES(${name}
            #    ${ATLAS_LAPACK}
            #    ${ATLAS_CBLAS}
            #    ${ATLAS} )
    ENDIF( NEKTAR_USE_ATLAS AND ATLAS_FOUND )

    TARGET_LINK_LIBRARIES(${name}
        optimized LibUtilities debug LibUtilities-g
        optimized ${Boost_THREAD_LIBRARY_RELEASE} debug ${Boost_THREAD_LIBRARY_DEBUG}
	optimized ${Boost_ZLIB_LIBRARY_RELEASE} debug ${Boost_ZLIB_LIBRARY_DEBUG}	
        optimized ${Boost_IOSTREAMS_LIBRARY_RELEASE} debug ${Boost_IOSTREAMS_LIBRARY_DEBUG}
        optimized tinyxml debug tinyxml
	)

    IF( ${CMAKE_SYSTEM} MATCHES "Linux.*" )
        # The boost thread library needs pthread on linux.
	GET_TARGET_PROPERTY(THE_COMPILE_FLAGS ${name} COMPILE_FLAGS)
	GET_TARGET_PROPERTY(THE_LINK_FLAGS ${name} LINK_FLAGS)

	# It is possible these flags have not been set yet.
	IF(NOT THE_COMPILE_FLAGS)
		SET(THE_COMPILE_FLAGS "")
	ENDIF(NOT THE_COMPILE_FLAGS)

	IF(NOT THE_LINK_FLAGS )
	       SET(THE_LINK_FLAGS "")
	ENDIF(NOT THE_LINK_FLAGS)

        SET_TARGET_PROPERTIES(${name} PROPERTIES COMPILE_FLAGS "${THE_COMPILE_FLAGS} -pthread")
        SET_TARGET_PROPERTIES(${name} PROPERTIES LINK_FLAGS "${THE_LINK_FLAGS} -pthread")
	
    ENDIF( ${CMAKE_SYSTEM} MATCHES "Linux.*" )

    INSTALL(TARGETS ${name} RUNTIME DESTINATION ${NEKTAR_BIN_DIR} OPTIONAL
	 ARCHIVE DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL
		LIBRARY DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL)

ENDMACRO(ADD_NEKTAR_EXECUTABLE name sources)



SET(LibrarySubDirs LibUtilities LocalRegions MultiRegions SpatialDomains
StdRegions Stochastic)
SET(UnitTestSubDirs UnitTests)
SET(DemoSubDirs Demos)

SUBDIRS(${LibrarySubDirs} ${UnitTestSubDirs} )
IF( NEKTAR_BUILD_DEMOS )
    SUBDIRS(${DemoSubDirs})
ENDIF( NEKTAR_BUILD_DEMOS )

CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/Nektar++Config.cmake.in 
               ${CMAKE_BINARY_DIR}/Nektar++Config.cmake @ONLY)
INSTALL(FILES ${CMAKE_BINARY_DIR}/Nektar++Config.cmake 
              ${CMAKE_SOURCE_DIR}/FindBoost.cmake
              ${CMAKE_SOURCE_DIR}/FindLoki.cmake
	      ${CMAKE_SOURCE_DIR}/FindFramework.cmake
              ${CMAKE_SOURCE_DIR}/FindACML.cmake
              ${CMAKE_SOURCE_DIR}/FindAtlas.cmake
              ${CMAKE_SOURCE_DIR}/FindMKL.cmake
              ${CMAKE_SOURCE_DIR}/FindWin32Lapack.cmake
	      ${CMAKE_SOURCE_DIR}/NektarCommon.cmake
              ${CMAKE_SOURCE_DIR}/FindTinyXml.cmake
              DESTINATION ${CMAKE_INSTALL_PREFIX}) 

INSTALL(EXPORT Nektar++Libraries DESTINATION lib)

CMAKE_EXPORT_BUILD_SETTINGS("Nektar++BuildSettings.cmake")

