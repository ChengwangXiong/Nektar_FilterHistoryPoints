CMAKE_MINIMUM_REQUIRED(VERSION 2.4.2)
PROJECT(Nektar++)

# Find the modules included with Nektar
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR} ${CMAKE_MODULE_PATH})
SET(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/dist CACHE FILEPATH "" FORCE)

IF( ${CMAKE_COMPILER_IS_GNUCXX} )
	SET(USE_GCOV OFF CACHE BOOL "Use gcov coverage testing." )
ENDIF( ${CMAKE_COMPILER_IS_GNUCXX} )

SET(USE_MKL OFF CACHE BOOL "Use the Intel Math Kernel Library (MKL) for BLAS and Lapack support." )
SET(USE_FRAMEWORK OFF CACHE BOOL "Use the Mac Framework system for BLAS and Lapack support." )
SET(USE_ACML OFF CACHE BOOL "Use the AMD Core Math Library (ACML) for BLAS and Lapack support." )
SET(USE_ATLAS OFF CACHE BOOL "Use ATLAS for BLAS and Lapack support." )
SET(USE_WIN32_LAPACK OFF CACHE BOOL "Use Win32 Lapack provided with the Third Party Distribution.")
SET(USE_NEKTAR_MEMORY_POOLS ON CACHE BOOL "Use memory pools to accelerate memory allocation.")
SET(USE_BLAS_LAPACK ON CACHE BOOL "Use Blas and lapack routine.")

SET(USE_EXPRESSION_TEMPLATES ON CACHE BOOL "")

INCLUDE (FindBoost)
INCLUDE (FindLoki)
INCLUDE (FindTinyXml)

IF( USE_MKL )
    INCLUDE (FindMKL)
ENDIF( USE_MKL )

IF( USE_FRAMEWORK )
    INCLUDE (FindFramework)
ENDIF( USE_FRAMEWORK )

IF( USE_ATLAS )
    INCLUDE( FindAtlas )
ENDIF( USE_ATLAS )

IF( USE_ACML )
    INCLUDE (FindACML)
ENDIF( USE_ACML )

IF( USE_WIN32_LAPACK )
	INCLUDE (FindWin32Lapack.cmake)
ENDIF( USE_WIN32_LAPACK )


INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR} ${BOOST_INCLUDE_DIR} ${LOKI_INCLUDE_DIR} ${TINYXML_BASE})

SET(NEKTAR_VERSION 0.1.1)
SET(NEKTAR_BIN_DIR bin)
SET(NEKTAR_LIB_DIR lib)
SET(NEKTAR_INCLUDE_DIR include)

#LIB_DIRECTORIES( ${BOOST_LIB_DIR} ${LOKI_LIB_DIR} ${TINYXML_LIB_DIR})

MACRO(ADD_NEKTAR_LIBRARY name type)
    ADD_LIBRARY(${name} ${type} ${ARGN})

    SET_TARGET_PROPERTIES(${name} PROPERTIES VERSION ${NEKTAR_VERSION})

    SET_TARGET_PROPERTIES(${name} PROPERTIES DEBUG_POSTFIX -g)
    SET_TARGET_PROPERTIES(${name} PROPERTIES MINSIZEREL_POSTFIX -ms)
    SET_TARGET_PROPERTIES(${name} PROPERTIES RELWITHDEBINFO_POSTFIX -rg)

#    INSTALL(TARGETS ${name} DESTINATION ${NEKTAR_LIB_DIR})
     INSTALL(TARGETS ${name} RUNTIME DESTINATION ${NEKTAR_BIN_DIR} OPTIONAL
          ARCHIVE DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL
          LIBRARY DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL)
							
ENDMACRO(ADD_NEKTAR_LIBRARY name)

IF( ${CMAKE_COMPILER_IS_GNUCXX} )	
	IF( USE_GCOV )
		ADD_DEFINITIONS(-fprofile-arcs -ftest-coverage)
	ENDIF( USE_GCOV )
ENDIF( ${CMAKE_COMPILER_IS_GNUCXX} )

IF( USE_EXPRESSION_TEMPLATES )
    ADD_DEFINITIONS(-DNEKTAR_USE_EXPRESSION_TEMPLATES -DNEKTAR_USING_CMAKE)
ENDIF( USE_EXPRESSION_TEMPLATES )

IF( USE_NEKTAR_MEMORY_POOLS )
        ADD_DEFINITIONS(-DNEKTAR_MEMORY_POOL_ENABLED)
ENDIF( USE_NEKTAR_MEMORY_POOLS )

IF( USE_MKL )
    SET(NEKTAR_USING_BLAS TRUE)
    SET(NEKTAR_USING_LAPACK TRUE)
    SET(NEKTAR_USING_MKL TRUE)
    ADD_DEFINITIONS(-DNEKTAR_USING_LAPACK -DNEKTAR_USING_BLAS)	
ENDIF( USE_MKL )

IF( USE_ATLAS )
    SET(NEKTAR_USING_BLAS TRUE)
    SET(NEKTAR_USING_ATLAS TRUE)
    ADD_DEFINITIONS(-DNEKTAR_USING_LAPACK -DNEKTAR_USING_BLAS)	
ENDIF( USE_ATLAS )

IF( USE_ACML )
    SET(NEKTAR_USING_BLAS TRUE)
    SET(NEKTAR_USING_LAPACK TRUE)
    SET(NEKTAR_USING_ACML TRUE)
    ADD_DEFINITIONS(-DNEKTAR_USING_LAPACK -DNEKTAR_USING_BLAS -DUSE_ACML)
ENDIF( USE_ACML )

IF( USE_BLAS_LAPACK )
    ADD_DEFINITIONS( -DNEKTAR_USING_LAPACK -DNEKTAR_USING_BLAS )
ENDIF( USE_BLAS_LAPACK )


IF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE)
ENDIF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )

IF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 7 .NET 2003" )
	# Needed for M_PI to be visible in visual studio.
	ADD_DEFINITIONS(-D_USE_MATH_DEFINES)
ENDIF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 7 .NET 2003" )

IF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	
	ADD_DEFINITIONS(-D_USE_MATH_DEFINES)
ENDIF( ${CMAKE_GENERATOR} STREQUAL "Visual Studio 8 2005" )	

MACRO(ADD_NEKTAR_EXECUTABLE name sources)
    ADD_EXECUTABLE(${name} ${${sources}} )

    IF( USE_MKL AND MKL_FOUND )
    #        MESSAGE("Using MKL")
            TARGET_LINK_LIBRARIES(${name}
                ${MKL_LAPACK}
                optimized ${MKL} debug ${MKL}
                ${MKL_GUIDE}
    
    #optimized mkl_ia32 debug mkl_ia32
    #            optimized mkl debug mkl
    #            optimized vml debug vml
    #            optimized guide debug guide
            )
    ENDIF( USE_MKL AND MKL_FOUND )
    
    IF( USE_ACML AND ACML_FOUND )
        #TARGET_LINK_LIBRARIES(${name} ${ACML} gfortran )
    ENDIF( USE_ACML AND ACML_FOUND )
    
    IF( USE_ATLAS AND ATLAS_FOUND )
            #TARGET_LINK_LIBRARIES(${name}
            #    ${ATLAS_LAPACK}
            #    ${ATLAS_CBLAS}
            #    ${ATLAS} )
    ENDIF( USE_ATLAS AND ATLAS_FOUND )
    
    IF( ${CMAKE_COMPILER_IS_GNUCXX} )
            IF( USE_GCOV )
            TARGET_LINK_LIBRARIES(${name} gcov)
        ENDIF( USE_GCOV )
    ENDIF( ${CMAKE_COMPILER_IS_GNUCXX} )

    TARGET_LINK_LIBRARIES(${name}
        optimized LibUtilities debug LibUtilities-g
        optimized ${BOOST_THREAD_LIB} debug ${BOOST_THREAD_DEBUG_LIB})
        
    INSTALL(TARGETS ${name} RUNTIME DESTINATION ${NEKTAR_BIN_DIR} OPTIONAL
	 ARCHIVE DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL
		LIBRARY DESTINATION ${NEKTAR_LIB_DIR} OPTIONAL)
ENDMACRO(ADD_NEKTAR_EXECUTABLE name)

SUBDIRS(LibUtilities LocalRegions MultiRegions SpatialDomains StdRegions Stochastic UnitTests NewUnitTests Demos)

